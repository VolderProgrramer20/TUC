// process.cpp –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–∞–≥–æ–¥–∞—Ä—è –∏–∏.

// "–ü–æ—Ñ–∏–∫—à–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
// –í—Å—ë, —Ç–µ–ø–µ—Ä—å –∫—Ä–∞–¥—ë–º –∫–æ–¥ –¥–ª—è NRC. –î–µ–ª–∞–µ–º –±–∏–∑–Ω–µ—Å ü§ëü§ëü§ë" - SpaceOC
#include "tuc/process.h"
#include <atomic>
#include <cstring>
#include <ctime>
#include <chrono>

namespace ProcessManager {

    static std::array<PCB, MAX_PROCS> pcb_table;                 // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    static std::deque<uint32_t> ready_queue(MAX_PROCS);          // –∫—Ç–æ –∂–¥—ë—Ç —Å–≤–æ–µ–≥–æ —à–∞–Ω—Å–∞
    static std::deque<uint32_t> blocked_queue(MAX_PROCS);        // –∫—Ç–æ –∂–¥—ë—Ç —Å–æ–±—ã—Ç–∏—è
    static std::atomic<uint32_t> next_pid{1};                    // –¥–ª—è –≤—ã–¥–∞—á–∏ pid‚Äô(–æ—Ä)–æ–≤
    static std::mutex pm_mutex;                                  // —ç–º—É–ª—è—Ü–∏—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
    static uint32_t current_idx = 0;                             // –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
    static time_t currentProcessTime;                            // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    
    void init() {
        std::lock_guard lock(pm_mutex);
        // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        for (auto &pcb : pcb_table) {
            pcb.state = ProcState::TERMINATED;
            pcb.stack_base = pcb.stack_ptr = nullptr;
        }
        ready_queue.clear();
        blocked_queue.clear();
        current_idx = 0;
    }

    std::optional<uint32_t> create_process(std::function<void(PCB*)> entry_point) {
        std::lock_guard lock(pm_mutex);

        if (ready_queue.size() + blocked_queue.size() >= MAX_PROCS) {
            return std::nullopt; // –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫ —Å–æ—Ä–µ (—á—Ç–æ –∑–∞ cope? - SpaceOC)
        }

        uint32_t pid = next_pid.fetch_add(1);
        size_t idx = pid % MAX_PROCS;

        // –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
        for (size_t i = 0; i < MAX_PROCS; ++i) {
            size_t try_idx = (idx + i) % MAX_PROCS;
            if (pcb_table[try_idx].state == ProcState::TERMINATED) {
                idx = try_idx;
                break;
            }
        }
        if (pcb_table[idx].state != ProcState::TERMINATED) {
            return std::nullopt;
        }

        // –≤—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å –ø–æ–¥ —Å—Ç–µ–∫
        uint8_t* stack = new (std::nothrow) uint8_t[STACK_SIZE];
        if (!stack) {
            return std::nullopt;
        }

        pcb_table[idx] = {
            pid,
            ProcState::NEW,
            stack,
            stack + STACK_SIZE,
            0,
            std::move(entry_point)
        };

        // —Å—Ä–∞–∑—É –≤ –æ—á–µ—Ä–µ–¥—å –≥–æ—Ç–æ–≤—ã—Ö
        pcb_table[idx].state = ProcState::READY;
        ready_queue.push_back(idx);

        return pid;
    }

    bool stack_memory_is_full(PCB* process) {
        return (process->stack_ptr <= process->stack_base);
    }

    void exit_process() {
        std::lock_guard lock(pm_mutex);
        auto &pcb = pcb_table[current_idx];
        pcb.state = ProcState::TERMINATED;
        delete[] pcb.stack_base;
        pcb.stack_base = pcb.stack_ptr = nullptr;
        std::cout << "[proc#" << pcb.pid << "] end\n";
    }

    void block_current() {
        std::lock_guard lock(pm_mutex);
        auto &pcb = pcb_table[current_idx];
        pcb.state = ProcState::BLOCKED;
        blocked_queue.push_back(current_idx);
        std::cout << "[proc#" << pcb.pid << "] freeze...\n";
    }

    bool unblock(uint32_t pid) {
        std::lock_guard lock(pm_mutex);
        for (auto it = blocked_queue.begin(); it != blocked_queue.end(); ++it) {
            if (pcb_table[*it].pid == pid) {
                pcb_table[*it].state = ProcState::READY;
                ready_queue.push_back(*it);
                blocked_queue.erase(it);
                std::cout << "[proc#" << pid << "] unfreezed.\n";
                return true;
            }
        }
        return false;
    }

    [[noreturn]] void scheduler_loop() {
        while (true) {
            bool ready_quene_is_empty;
            uint32_t next_idx = 0;
            {
                std::lock_guard lock(pm_mutex);
                ready_quene_is_empty = ready_queue.empty();
                if (!ready_quene_is_empty) {
                    next_idx = ready_queue.front();
                    ready_queue.pop_front();
                }
                // –ï—Å–ª–∏ –≤–æ–≤—Ä–µ–º—è –Ω–µ —Ä–∞–∑–±–ª–æ—á–∏—Ç—å, —Ç–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–ª—É—á–∏—Ç—Å—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                // –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏—á–∏–Ω–æ–π —Ç–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã —è–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø—Ä–∏—á–∏–Ω–Ω—ã–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ scheduler_loop –≤ exit_process
                // TODO: –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É —Å–Ω–∏–∑—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ
                pm_mutex.unlock();
            }

            if (!ready_quene_is_empty) {
                current_idx = next_idx;
                auto &pcb = pcb_table[current_idx];
                pcb.state = ProcState::RUNNING;
                uint32_t pid = pcb.pid;
                std::cout << "[sched] start proc#" << pid << "\n";

                // TODO: –ï—Å–ª–∏ —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (–∑–∞–≤–∏—Å–∞—Ç—å) –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, —Ç–æ –Ω–∞—á–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/–≤—ã–∫–ª—é—á–µ–Ω–∏—è.
                // –î–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –≥–¥–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ .-.
                // –û–π –±...

                auto start = std::chrono::steady_clock::now();

                // 'debug'
                //std::cout << "proc#" << pcb.pid << " adr: " << &pcb.stack_base << '\n';
                //std::cout << "proc#" << pcb.pid << " end adr: " << &pcb.stack_ptr << '\n';
                //std::cout << "proc#" << pcb.pid << " memory used before entry: " << pcb.memory_used << '\n';

                pcb.entry(&pcb);

                //std::cout << "proc#" << pcb.pid << " memory used after entry: " << pcb.memory_used << '\n';
                //std::cout << "proc#" << pcb.pid << " end adr: " << &pcb.stack_ptr << '\n';

                exit_process();
                auto end = std::chrono::steady_clock::now();
                long long duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();
                std::cout << "[sched] proc#" << pid << " time: " << duration << "ms\n";
            }
        }
    }

    void checking_process_time_loop() {
        // TODO: –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å –∏ –µ–≥–æ –º–æ–∂–Ω–æ —É–∂–µ –ø—ã—Ç–∞—Ç—å—Å—è –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    }

    bool trying_force_stop_process() {
        // TODO: –°–¥–µ–ª–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞.
        return true;
    }
}
// —Å–¥–µ–ª–∞–Ω–æ —ç–∫–ª–µ—Ä–æ–º –≤ 2024 –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ claude 4 :) —è –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é –†–ê–ë–û–¢–ê–ï–¢ –ª–∏ —ç—Ç–æ. 
// –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–¥–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–∑ –Ω—ã–Ω–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ Slim Core.

// "–ü–æ—Ñ–∏–∫—à–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
// –í—Å—ë, —Ç–µ–ø–µ—Ä—å –∫—Ä–∞–¥—ë–º –∫–æ–¥ –¥–ª—è NRC. –î–µ–ª–∞–µ–º –±–∏–∑–Ω–µ—Å ü§ëü§ëü§ë" - SpaceOC
#ifndef TUC_PROCESS_MANAGER_H_
#define TUC_PROCESS_MANAGER_H_

#include <cstdint>
#include <array>
#include <deque>
#include <functional>
#include <optional>
#include <mutex>
#include <iostream>

// –∑–∞–¥–∞—ë–º –º–∞–∫—Å. –∫–æ–ª‚Äë–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞ –∫–∞–∂–¥–æ–≥–æ
constexpr size_t MAX_PROCS = 64;
constexpr size_t STACK_SIZE = 8 * 1024; // 8–ö–ë

// —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
enum class ProcState {
    NEW,
    READY,
    RUNNING,
    BLOCKED,
    TERMINATED // –Ø —É—Ö–æ–∂—É, –∞–¥—å—ë—Å
};

// –≤–æ—Ç —á—Ç–æ —Ö—Ä–∞–Ω–∏—Ç —è–¥—Ä–æ –ø—Ä–æ –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ü–µ—Å—Å
struct PCB {
    uint32_t pid;                    // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    ProcState state;                 // —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    uint8_t* stack_base;             // –≥–¥–µ –Ω–∞—à —Å—Ç–µ–∫
    uint8_t* stack_ptr;              // —Ç–µ–∫—É—â–∏–π SP
    int memory_used;                 // –°–∫–æ–ª—å–∫–æ –ø–∞–º—è—Ç–∏ –∑–∞–Ω—è—Ç–æ
    std::function<void(PCB*)> entry; // —á—Ç–æ –∑–∞–ø—É—Å–∫–∞—Ç—å
};

namespace ProcessManager {
    // –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É —Ö—Ä–µ–Ω—å
    void init();

    /**
     * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
     * @param entry_point –§—É–Ω–∫—Ü–∏—è
     * @return –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PID –ø—Ä–æ—Ü–µ—Å—Å–∞, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ - std::nullopt
     */
    std::optional<uint32_t> create_process(std::function<void(PCB*)> entry_point);

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å –≤ —Å—Ç–µ–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ –Ω–µ—Ç
     * @param process –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
     * @return true - –µ—Å–ª–∏ –ø–∞–º—è—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –∏–Ω–∞—á–µ false
     */
    bool stack_memory_is_full(PCB* process);

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å –≤ —Å—Ç–µ–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–ª–∏ –Ω–µ—Ç
     * @param process –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
     * @return true - –µ—Å–ª–∏ –ø–∞–º—è—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –∏–Ω–∞—á–µ false
     */
    template<typename T>
    bool stack_memory_is_full_t(PCB* process) {
        return (process->stack_ptr - sizeof(T) < process->stack_base);
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–µ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
     * –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –≥–æ—Ç–æ–≤/–∑–∞–ø—É—â–µ–Ω, —Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ç–µ–∫–µ
     * @param process –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
     * @param value –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–µ–∫
     * @return –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–µ–∫.
     */
    template <typename T>
    T push_to_stack(PCB* process, T value) {
        if (!process || (process->state != ProcState::RUNNING && process->state != ProcState::READY)) {
            std::cout << "[ProcessManager] - ERROR: This process not initialized. Value NOT pushed in the process stack\n";
            return value;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (stack_memory_is_full_t<T>(process)) {
            std::cout << "[ProcessManager] - ERROR: Memory is full. Value NOT pushed in the process stack\n";
            return value;
        }

        process->stack_ptr -= sizeof(T);
        // TODO: –ü—Ä–∏–¥—É–º–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏ –≤ —Å—Ç–µ–∫–µ.
        process->memory_used += sizeof(T);
        *reinterpret_cast<T*>(process->stack_ptr) = value;
        return value;
    }

    // –ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û
    template <typename T>
    T pop_from_stack(PCB* process) {
        if (process->state != ProcState::RUNNING && process->state != ProcState::READY) {
            std::cout << "[ProcessManager] - ERROR: This process not initialized. Value NOT pushed in the process stack\n";
            T value;
            return value;
        }

        T value = *reinterpret_cast<T*>(process->stack_ptr);
        process->stack_ptr += sizeof(T);
        return value;
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    void exit_process();

    // –±–ª–æ–∫–∏—Ä—É–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    void block_current();

    //–∫–æ–≥–¥–∞ –∞–π–æ –≥–æ—Ç–æ–≤–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –Ω–∞—à–ª–∏
    bool unblock(uint32_t pid);

    // –±–µ—Å—Å—Ä–æ—á–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    [[noreturn]] void scheduler_loop();

    // —Ü–∏–∫–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    // –∏ –∞–≤—Ç–æ-–≤–∫–ª—é—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é trying_stop_process, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å (?)
    void checking_process_time_loop();

    /**
     * –î–æ—Å—Ä–æ—á–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
     * @return true - –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ - false
     */
    bool trying_force_stop_process();
}

#endif // TUC_PROCESS_MANAGER_H_